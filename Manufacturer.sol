pragma solidity ^0.4.15;
//Developed by Mansoor Alblooshi, Prof. Khaled Salah, and Dr. Yousof Alhammadi
//Khalifa University 
//{mansoor.albloushi, khaled.salah, yousof.alhammadi}@ku.ac.ae


//Smart Contract thats controlled by Manufacture used to generate New IoT devices ownership smart contracts
contract Manufacturer {			
    address[] public IoTDevices; // list of public addresses (PA) of IoT devices generated by the Manufacturer
	address manufacturerOwner; 

    modifier onlyOwner{ //prerequisite 
	require(msg.sender == manufacturerOwner); 
	_; 
	}
	
    event addNewIoT(string _productName, address currentOwner, address newDevicePA); //record new IOT devices 
	
	function Manufacturer(){ //constructor 
		manufacturerOwner = msg.sender; 
	}
	
	//Function controlled by Manufacturer
    function createIotContract (string _productName, string _description, string _specification, string _serialNumber) onlyOwner returns (address){ 
        address newDevice = new IotCreation(manufacturerOwner,  _productName,  _description,  _specification,  _serialNumber); // Generate a new smart contract for new IoT device 
        IoTDevices.push(newDevice); 
        addNewIoT(_productName, msg.sender,newDevice); //log the changes 
        return newDevice; 
    } 
    
}

//Smart Contract thats owned by the owner of IoT devices 
contract IotCreation{ //IoT Device contracts
	address public owner; //IoT Device owner public address
	string public productName; 
	string public description;  
	string[] public specification; 
	string public serialNumber; 

	event addNewOwner(string _msg, address newOwner);
	
	function IotCreation(address _owner, string _productName, string _description, string _specification, string _serialNumber){
	// store IoT device owner record
	owner = _owner;
	productName = _productName;
	description = _description;
	specification.push(_specification); 
    serialNumber = _serialNumber; 
	// keep record of all IoT device owners
	addNewOwner ('Device has been created', owner);
	}
	
	modifier ifOwner(){//prerequisite 
		require(msg.sender == owner); 
		_;			
	}

		//Function controlled by IoT device owner	
	function ownershipTransfer(address newOwner) ifOwner {
		owner = newOwner ;
	}
	
	
	function productNameUpdate(string newProductName) ifOwner{
		productName = newProductName; 
	}
	
	function specificationUpdate(string newSpecification) ifOwner{
		specification.push(newSpecification);
	}
	
	//Function controlled by owner
	function deviceDecommissioning() ifOwner{ //no revert back
		owner = 0; 
		addNewOwner ('Device has been decommissioned');
	}
	

}